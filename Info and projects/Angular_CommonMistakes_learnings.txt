---- Router.navigate---

we must allways give router.navigate(['<<url>>']) not router.navigate('url')


---- please import HttpClientModule in main module for using HttpClient in services ---------



----- not using name attribute username form control when [(ngModel)] is used.

when ever we use ngModel for two way binding it expects name attribute to be specified in html tag
otherwise it will throw error.


------------ cross component communication in angular----------------------

Since we use router-outlet we need to create subject in common service for cross component communication

example suppose we have a user profile page where we login and and as soon as user logs in successfully we 
want our nav bar component to update some values.

to handle this scenario we can send an evene to nav-bar component

example:

my-account.component.ts

  //generate a login suucess event
  //@Output() onLoginSucess = new EventEmitter<boolean>();

 onLogin() {

 	// rest of the code
	 this.loginService.emitLogInSuccess();
}


login.service.ts

  loggedIn:Subject<boolean> = new Subject<boolean>(); // create a subject
  
emitLogInSuccess(){

    this.loggedIn.next(true) // put value to logged in subject

  }		


nav-bar.component.ts


constructor(private loginService:LoginService){

loggedIn:boolean

this.loginService.loggedIn.subscribe(   // subscribe to the subject

      (loginsuccess:boolean) =>{ this.loggedIn = loginsuccess } //as soon as user logs in we are setting 
								value of logged in.	
    )									



	
------------------ declaring forms in template driven form------------------

apart from declaring reference variable for form we also need to assign it to "ngForm" so that angular could
know it is a form reference varaible

example:
 <form (ngSubmit)="onUpdateUserInfo()" style="margin-top:15px;" #uploadForm = "ngForm"

otherwise to check for form level validations for example uploadForm.valid() it wont work.


adding css for invalid data  to form control element for example <input type = "text" ... > 
then we cam do:

input.ng-touched.ng-invalid{

  border:1px solid red;
}


-------------- creating model classes in Angular ------------

variables names defined in model class should be in sync with corresponding pojo class in backend , other wise
value of json response returned from backend may not map properly to variables in model.



------------- removing an element from an array in typescript/angular ----------------------------

we can remove an element from an array in angular using splice method .

how to remove example :

        this.cardDetailsList.splice(this.cardDetailsList.indexOf(payment),1);

here cardDetails list is an array of user defined objects eg   cardDetailsList:UserPayment[];

in the splice method we must pass the index of the element we wan to delete and the number of elements we want to delete,

if we dont pass the num of elements it will delete all the elements from the given index.



------------- Data Table in Angular -------------------------------------

for creating a search nice table we can install angular data table using npm install, with data table we can implment 
pagination and search 


--------  Lodash Library in java script -------------------

we can install lodash library in java script which is capable of performing efficient operations on collections.
Dont know much need to read...

--- Various predefined pipes used in store-front project ----------------


uppercase pipe:

there is an "uppercase" pipe which converts the given characters into uppercase.

example:<span>{{book.format | uppercase}}</span> -- Conerts the string returned by book.format into uppercase.


currency pipe:

there is a currency pipe which is used to print currency symbol.

example:

 <a (click)="onSelectBook(book)" style="font-size: x-large;color:#db3208">
                {{book.ourPrice | currency: 'USD' }}  // here dollar symbol will be added before price in the view.
              </a>


slice Pipe:

slice pipe helps in reducing number of characters for example we only want to display first 500 characters of string we must do:

<p>{{book.description | slice:0:500}}</p> , will display from 0 to 500 characters from a description.

------------------ creating your own pipe/custom pipe in angular -----------------------------


we can create our custom pipe by using pipe decorator(@pipe) and by implemneting pipetransform as shown in below example:

@Pipe(
  {
    name:"dataFilter"
  }
)
export class DataFilterPipe implements PipeTransform{

  transform(array:any,query:string):any // can be any arguments, array argument should be by default as filter is applied on collection 
  {
	
	//transformation logic for array
	
      return array; //return the transformed array.
  }

 }

using the custom pipe:

example : 
    <table class="table" [mfData]="bookList | dataFilter : filterQuery" 
where filterQuery is argument passed to filter an array.




--------------------------------- ngModelChange in Angular ---------------------------------------------------


lets take we have a scenario where we are showing quantity in cart using ngModel and if user changes the value of qunatity we want to show a button

we can detect the changes using ng model and show a button in UI as shown below:

    <input type = "text" class = "form-control" name = "qty" [(ngModel)] = "item.qty"
           (ngModelChange) =  "item.toUpdate = true">
    <button mat-button *ngIf = "item.toUpdate == true" (click) = "onUpdateCartItem(item)">Update</button>



in above code we are showing value in text using item.qty and when user changes the value of item.qty can use ngModelChange to update the value pf toUpdate in model class item

and when item.toUpdate is updated to true then we can show the button to update.

